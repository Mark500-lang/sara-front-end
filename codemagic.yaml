```yaml
workflows:
  ios-release:
    name: iOS Release Build
    integrations:
      app_store_connect: codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        NODE_VERSION: "20.x"
        COCOAPODS_VERSION: "1.15.2"
        DEVELOPMENT_TEAM: "H9A4H444G4"
        BUNDLE_ID: "com.littlestories.app"
        CI: "false"
        DISABLE_ESLINT_PLUGIN: "true"
      groups:
        - Sarastories
      node: 20
      xcode: latest
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - ios/Pods
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
        - pattern: master
          include: true
        - pattern: develop
          include: true

    scripts:
      # PHASE 1: CLEAN AND SETUP
      - name: Clean Workspace
        script: |
          echo "=== Cleaning Workspace ==="
          rm -rf node_modules ios/Pods ios/App/Pods
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ios/Pods ios/Podfile.lock
          npm cache clean --force

      # PHASE 2: DEPENDENCY INSTALLATION
      - name: Install Dependencies
        script: |
          set -ex
          echo "=== Installing Node Modules ==="
          npm ci

          echo "=== Installing cordova-plugin-purchase ==="
          npm install --save cordova-plugin-purchase@13.12.1

          echo "=== Installing missing Babel plugin ==="
          npm install --save-dev @babel/plugin-proposal-private-property-in-object
          
          echo "=== Updating browserslist ==="
          npx update-browserslist-db@latest

          echo "=== Verifying cordova-plugin-purchase ==="
          if [ ! -d "node_modules/cordova-plugin-purchase" ]; then
            echo "❌ cordova-plugin-purchase not found in node_modules"
            exit 1
          fi
          echo "✅ cordova-plugin-purchase verified"

      # PHASE 3: BUILD REACT APP
      - name: Build React App
        script: |
          set -ex
          echo "=== Building React App ==="
          export DISABLE_ESLINT_PLUGIN=true
          export ESLINT_NO_DEV_ERRORS=false
          
          npm run build
          
          if [ ! -d "build" ]; then
            echo "❌ React build failed - build directory not found"
            exit 1
          fi

          echo "=== Copying Cordova Plugin JS ==="
          mkdir -p build/plugins/cordova-plugin-purchase/www
          cp node_modules/cordova-plugin-purchase/www/store.js build/plugins/cordova-plugin-purchase/www/
          echo "✅ Copied store.js"

      # PHASE 4: CAPACITOR SYNC AND CONFIGURE ORIENTATIONS
      - name: Sync Capacitor and Configure Orientations
        script: |
          set -ex
          echo "=== Syncing Capacitor for iOS ==="
          npx cap sync ios

          echo "=== Verifying cordova-plugin-purchase inclusion ==="
          # Wait for file system to settle
          sleep 2
          # Check if cordova_plugins.js exists in www directory
          if [ ! -f "ios/App/App/www/cordova_plugins.js" ]; then
            echo "❌ cordova_plugins.js not found in ios/App/App/www/, attempting to regenerate..."
            # Clean and re-sync to ensure plugin inclusion
            rm -rf ios/App/App/www
            npx cap sync ios
          fi
          # Verify plugin inclusion
          if [ -f "ios/App/App/www/cordova_plugins.js" ] && grep -q "cordova-plugin-purchase" ios/App/App/www/cordova_plugins.js; then
            echo "✅ cordova-plugin-purchase included in cordova_plugins.js"
          else
            echo "❌ cordova-plugin-purchase not included in cordova_plugins.js"
            echo "=== Debugging Info ==="
            echo "Directory contents (ios/App/App/www/):"
            ls -la ios/App/App/www/ || echo "Directory not found"
            echo "capacitor.config.json contents:"
            cat capacitor.config.json || echo "File not found"
            if [ -f "ios/App/App/www/cordova_plugins.js" ]; then
              echo "cordova_plugins.js contents:"
              cat ios/App/App/www/cordova_plugins.js
            else
              echo "cordova_plugins.js not found"
            fi
            exit 1
          fi

          echo "=== Configuring iOS Orientations ==="
          cd ios/App/App
          PLIST_PATH="Info.plist"
          
          # Remove any existing orientation settings
          /usr/libexec/PlistBuddy -c "Delete :UISupportedInterfaceOrientations" "$PLIST_PATH" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Delete :UISupportedInterfaceOrientations~ipad" "$PLIST_PATH" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Delete :UISupportedInterfaceOrientations~iphone" "$PLIST_PATH" 2>/dev/null || true
          
          # Configure for iPhone (Landscape only - your preference)
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations array" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations:0 string UIInterfaceOrientationLandscapeLeft" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations:1 string UIInterfaceOrientationLandscapeRight" "$PLIST_PATH"
          
          # Configure for iPad (ALL orientations required for multitasking)
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations~ipad array" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations~ipad:0 string UIInterfaceOrientationPortrait" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations~ipad:1 string UIInterfaceOrientationPortraitUpsideDown" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations~ipad:2 string UIInterfaceOrientationLandscapeLeft" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations~ipad:3 string UIInterfaceOrientationLandscapeRight" "$PLIST_PATH"
          
          # Set initial interface orientation to landscape (will still work on iPad)
          /usr/libexec/PlistBuddy -c "Delete :UIInterfaceOrientation" "$PLIST_PATH" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :UIInterfaceOrientation string UIInterfaceOrientationLandscapeRight" "$PLIST_PATH"
          
          echo "✅ Orientation configuration fixed - iPhone: Landscape only, iPad: All orientations"

      # PHASE 5: IOS PROJECT CONFIGURATION
      - name: Configure iOS Project
        script: |
          set -ex
          echo "=== Setting up iOS Platform ==="
          cd ios/App

          echo "=== Generating Podfile with cordova-plugin-purchase ==="
          cat > Podfile << 'EOF'
          platform :ios, '14.0'
          use_frameworks! :linkage => :dynamic
          
          # Suppress CDN warning
          install! 'cocoapods', :warn_for_unused_master_specs_repo => false

          target 'App' do
            # Capacitor Core
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'

            # Capacitor Plugins
            pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'
            pod 'CapacitorDevice', :path => '../../node_modules/@capacitor/device'
            pod 'CapacitorFilesystem', :path => '../../node_modules/@capacitor/filesystem'
            pod 'CapacitorPreferences', :path => '../../node_modules/@capacitor/preferences'
            
            # Additional plugins with correct pod names
            pod 'CapacitorVoiceRecorder', :path => '../../node_modules/capacitor-voice-recorder'
            pod 'AparajitaCapacitorSecureStorage', :path => '../../node_modules/@aparajita/capacitor-secure-storage'
            pod 'CapacitorBlobWriter', :path => '../../node_modules/capacitor-blob-writer'

            # Cordova Plugins
            pod 'cordova-plugin-purchase', '~> 13.12.1'

            # Ensure Cordova plugins are included
            pod 'CordovaPlugins', :path => '../../node_modules/@capacitor/cli/assets/capacitor-cordova-ios-plugins'
          end
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
                config.build_settings['CODE_SIGN_ENTITLEMENTS'] = 'App/App.entitlements'
                config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= ['$(inherited)']
                config.build_settings['OTHER_LDFLAGS'] ||= ['$(inherited)', '-ObjC']

                if target.name == 'GCDWebServer'
                  config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
                end
                
                if target.name.start_with?('Capacitor') || target.name.start_with?('Aparajita')
                  config.build_settings['SWIFT_VERSION'] = '5.0'
                  config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
                end
              end
            end
          end
          EOF
          
          echo "=== Installing CocoaPods ==="
          pod install --repo-update --clean-install

          echo "=== Verifying Project Structure ==="
          if [ -d "Pods" ] && [ -d "App.xcworkspace" ] && grep -q "cordova-plugin-purchase" Pods/Podfile.lock; then
            echo "✅ CocoaPods installation verified, cordova-plugin-purchase included"
          else
            echo "❌ CocoaPods installation failed or cordova-plugin-purchase missing!"
            exit 1
          fi

      # PHASE 6: CREATE ENTITLEMENTS FILE
      - name: Create Entitlements File
        script: |
          set -ex
          echo "=== Creating Entitlements File ==="
          cd ios/App/App

          cat > App.entitlements << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>application-identifier</key>
              <string>$DEVELOPMENT_TEAM.$BUNDLE_ID</string>
              <key>get-task-allow</key>
              <false/>
              <key>keychain-access-groups</key>
              <array>
                  <string>$DEVELOPMENT_TEAM.*</string>
              </array>
              <key>com.apple.developer.in-app-payments</key>
              <array>
                  <string>com.sarastories.app.monthly</string>
                  <string>com.sarastories.app.yearly</string>
              </array>
          </dict>
          </plist>
          EOF

          echo "✅ Entitlements file created with In-App Purchase capability"

      # PHASE 7: CREATE XCODE SCHEME
      - name: Create Xcode Scheme
        script: |
          set -ex
          echo "=== Creating Xcode scheme ==="
          cd ios/App
          
          # Create scheme directory
          mkdir -p App.xcodeproj/xcshareddata/xcschemes
          
          # Create scheme file
          cat > App.xcodeproj/xcshareddata/xcschemes/App.xcscheme << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <Scheme LastUpgradeVersion="1500" version="1.7">
            <BuildAction parallelizeBuildables="YES" buildImplicitDependencies="YES">
              <BuildActionEntries>
                <BuildActionEntry buildForTesting="YES" buildForRunning="YES" buildForProfiling="YES" buildForArchiving="YES" buildForAnalyzing="YES">
                  <BuildableReference BuildableIdentifier="primary" BlueprintIdentifier="1DF1B9C3257A6D4E00F1B1A6" BuildableName="App.app" BlueprintName="App" ReferencedContainer="container:App.xcodeproj"/>
                </BuildActionEntry>
              </BuildActionEntries>
            </BuildAction>
            <TestAction buildConfiguration="Debug" selectedDebuggerIdentifier="Xcode.DebuggerFoundation.Debugger.LLDB" selectedLauncherIdentifier="Xcode.DebuggerFoundation.Launcher.LLDB" shouldUseLaunchSchemeArgsEnv="YES" codeCoverageEnabled="YES">
              <Testables/>
            </TestAction>
            <LaunchAction buildConfiguration="Debug" selectedDebuggerIdentifier="Xcode.DebuggerFoundation.Debugger.LLDB" selectedLauncherIdentifier="Xcode.DebuggerFoundation.Launcher.LLDB" launchStyle="0" useCustomWorkingDirectory="NO" ignoresPersistentStateOnLaunch="NO" debugDocumentVersioning="YES" debugServiceExtension="internal" allowLocationSimulation="YES">
              <BuildableProductRunnable runnableDebuggingMode="0">
                <BuildableReference BuildableIdentifier="primary" BlueprintIdentifier="1DF1B9C3257A6D4E00F1B1A6" BuildableName="App.app" BlueprintName="App" ReferencedContainer="container:App.xcodeproj"/>
              </BuildableProductRunnable>
            </LaunchAction>
            <ProfileAction buildConfiguration="Release" shouldUseLaunchSchemeArgsEnv="YES" savedToolIdentifier="" useCustomWorkingDirectory="NO" debugDocumentVersioning="YES">
              <BuildableProductRunnable runnableDebuggingMode="0">
                <BuildableReference BuildableIdentifier="primary" BlueprintIdentifier="1DF1B9C3257A6D4E00F1B1A6" BuildableName="App.app" BlueprintName="App" ReferencedContainer="container:App.xcodeproj"/>
              </BuildableProductRunnable>
            </ProfileAction>
            <AnalyzeAction buildConfiguration="Debug"/>
            <ArchiveAction buildConfiguration="Release" revealArchiveInOrganizer="YES"/>
          </Scheme>
          EOF
          
          echo "✅ Xcode scheme created"

      # PHASE 8: CODE SIGNING SETUP
      - name: Configure Signing
        script: |
          set -ex
          echo "=== Setting Up Signing ==="
          cd ios/App
          
          # Import certificates
          echo "$CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          
          # Extract provisioning profile UUID
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
          [ -n "$PROFILE_UUID" ] || { echo "❌ Failed to extract profile UUID"; exit 1; }
          
          # Set up keychain
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          
          # Create pod signing override file
          echo "=== Configuring Pod Signing ==="
          cat > disable-pod-signing.xcconfig << EOF
          CODE_SIGNING_ALLOWED = NO
          CODE_SIGNING_REQUIRED = NO
          PROVISIONING_PROFILE_SPECIFIER = ""
          DEVELOPMENT_TEAM = ""
          EOF

          find "Pods/Target Support Files" -name "*.*cconfig" -exec sh -c 'echo "#include \"$(pwd)/disable-pod-signing.xcconfig\"" >> {}' \;

          echo "=== Updating Project Settings ==="
          PBXPROJ="App.xcodeproj/project.pbxproj"
          cp "$PBXPROJ" "$PBXPROJ.bak"
          
          # Remove any automatic signing settings
          sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' "$PBXPROJ"
          sed -i '' '/CODE_SIGN_STYLE/d' "$PBXPROJ"
          sed -i '' '/DEVELOPMENT_TEAM/d' "$PBXPROJ"
          
          # Add manual signing settings
          sed -i '' "/buildSettings = {/a \\
              CODE_SIGN_STYLE = Manual; \\
              PROVISIONING_PROFILE_SPECIFIER = \"$PROFILE_UUID\"; \\
              DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM; \\
              CODE_SIGN_IDENTITY = \"Apple Distribution\"; \\
              CODE_SIGN_ENTITLEMENTS = \"App/App.entitlements\"; \\
              " "$PBXPROJ"
          
          echo "PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV
          echo "✅ Signing configuration complete"

      # PHASE 9: BUILD CONFIGURATION (DEFINITIVE FIX)
      - name: Configure Build Settings
        script: |
          set -ex
          cd ios/App/App

          echo "=== Updating Version Numbers ==="
          PLIST_PATH="Info.plist"
          
          # Get current version and build number
          CURRENT_VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST_PATH" 2>/dev/null || echo "1.0")
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH" 2>/dev/null || echo "1")
          
          echo "Current version: $CURRENT_VERSION"
          echo "Current build: $CURRENT_BUILD"
          
          # Parse version components safely
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)
          
          # Handle cases where PATCH might be empty
          if [ -z "$PATCH" ] || [ "$PATCH" = "$CURRENT_VERSION" ]; then
            PATCH="0"
          fi
          
          # Increment patch version (1.0.5 → 1.0.6)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          # Generate timestamp-based build number for uniqueness
          NEW_BUILD=$(date +%s)
          
          echo "New version: $NEW_VERSION"
          echo "New build: $NEW_BUILD"
          
          # Update both version and build number
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $NEW_VERSION" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" "$PLIST_PATH"
          
          # Verify the changes were applied correctly
          echo "=== Verifying Plist Changes ==="
          FINAL_VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST_PATH")
          FINAL_BUILD=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH")
          FINAL_BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST_PATH")
          
          echo "Final CFBundleShortVersionString: $FINAL_VERSION"
          echo "Final CFBundleVersion: $FINAL_BUILD"
          echo "Final CFBundleIdentifier: $FINAL_BUNDLE_ID"
          
          # Critical validation - ensure CFBundleShortVersionString is set
          if [ -z "$FINAL_VERSION" ] || [[ "$FINAL_VERSION" == *"$"* ]]; then
            echo "❌ CRITICAL: CFBundleShortVersionString is not properly set!"
            echo "Setting fallback version: 1.0.6"
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString 1.0.6" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          fi

          echo "✅ Build settings configured"

      # PHASE 10: ADD PRIVACY DESCRIPTIONS
      - name: Add Privacy Descriptions
        script: |
          set -ex
          cd ios/App/App

          echo "=== Adding Required Privacy Descriptions ==="
          PLIST_PATH="Info.plist"

          /usr/libexec/PlistBuddy -c "Add :NSMicrophoneUsageDescription string 'This app needs microphone access to record audio for voice stories and narration.'" "$PLIST_PATH" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Set :NSMicrophoneUsageDescription 'This app needs microphone access to record audio for voice stories and narration.'" "$PLIST_PATH"

          /usr/libexec/PlistBuddy -c "Add :NSDocumentsFolderUsageDescription string 'This app needs storage access to preload and cache stories and audio files for offline use.'" "$PLIST_PATH" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Set :NSDocumentsFolderUsageDescription 'This app needs storage access to preload and cache stories and audio files for offline use.'" "$PLIST_PATH"

          /usr/libexec/PlistBuddy -c "Add :NSInAppPurchaseUsageDescription string 'This app offers in-app purchases for premium subscriptions to access additional stories and features.'" "$PLIST_PATH" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Set :NSInAppPurchaseUsageDescription 'This app offers in-app purchases for premium subscriptions to access additional stories and features.'" "$PLIST_PATH"

          echo "=== Verifying Privacy Descriptions ==="
          /usr/libexec/PlistBuddy -c "Print :NSMicrophoneUsageDescription" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Print :NSDocumentsFolderUsageDescription" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Print :NSInAppPurchaseUsageDescription" "$PLIST_PATH"

          echo "✅ Privacy descriptions added"

      # PHASE 11: BUILD UNSIGNED ARCHIVE
      - name: Build Unsigned Archive
        script: |
          set -ex
          cd ios/App
          
          # Clean previous builds
          rm -rf build/*
          
          # Verify signing assets
          echo "=== Verifying Signing Assets ==="
          security find-identity -v -p codesigning
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          if [ ! -f "$PROFILE_PATH" ]; then
            echo "❌ Provisioning profile not found at: $PROFILE_PATH"
            exit 1
          fi
          
          # Build without signing (will sign manually later)
          echo "=== Building Unsigned Archive ==="
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath build/App.xcarchive \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            clean archive
          
          # Verify archive exists
          if [ ! -d "build/App.xcarchive" ]; then
            echo "❌ Archive failed"
            exit 1
          fi
          
          echo "✅ Unsigned archive created successfully"

      # PHASE 12: MANUAL SIGNING
      - name: Manual Signing
        script: |
          set -ex
          cd ios/App

          echo "=== Performing Manual Signing ==="
          APP_PATH="build/App.xcarchive/Products/Applications/App.app"
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          
          # 1. Embed provisioning profile
          cp "$PROFILE_PATH" "$APP_PATH/embedded.mobileprovision"
          
          # 2. Sign frameworks first
          find "$APP_PATH/Frameworks" -name "*.framework" -print0 | while IFS= read -r -d '' fw; do
            codesign --force --sign "Apple Distribution" --preserve-metadata=identifier,entitlements "$fw"
          done
          
          # 3. Sign main app bundle
          codesign --force --sign "Apple Distribution" \
            --entitlements App/App.entitlements \
            --generate-entitlement-der \
            "$APP_PATH"
          
          # Final verification
          echo "=== Verifying Signature ==="
          codesign -vvv --deep --strict "$APP_PATH"
          echo "✅ Build successfully signed and validated"

      # PHASE 13: CREATE IPA MANUALLY
      - name: Create IPA Manually
        script: |
          set -ex
          cd ios/App
          
          echo "=== Creating IPA Manually ==="
          
          # Create IPA directory
          mkdir -p build/ipa/Payload
          
          # Copy the signed app to Payload directory
          cp -R build/App.xcarchive/Products/Applications/App.app build/ipa/Payload/
          
          # Create the IPA file
          cd build/ipa
          zip -qr App.ipa Payload
          
          # Verify the IPA was created
          if [ ! -f "App.ipa" ]; then
            echo "❌ IPA creation failed"
            exit 1
          fi
          
          echo "✅ IPA created manually"

      # PHASE 14: VALIDATION
      - name: Validate Build
        script: |
          set -ex
          echo "=== Validating Build Artifacts ==="
          
          if [ ! -f "ios/App/build/ipa/App.ipa" ]; then
            echo "❌ IPA file not found"
            echo "=== Checking export directories ==="
            find ios/App/build -name "*.ipa" 2>/dev/null || true
            ls -la ios/App/build/ || true
            exit 1
          fi
          
          # Check IPA contents
          unzip -l "ios/App/build/ipa/App.ipa" | grep "Payload/App.app" || {
            echo "❌ Invalid IPA structure"
            unzip -l "ios/App/build/ipa/App.ipa"
            exit 1
          }
          
          # Verify signing in the final IPA
          TEMP_DIR=$(mktemp -d)
          unzip -q ios/App/build/ipa/App.ipa -d "$TEMP_DIR"
          codesign -dv --verbose=4 "$TEMP_DIR/Payload/App.app" 2>&1 | grep -E 'Authority=Apple Distribution|TeamIdentifier=' || {
            echo "❌ Final IPA signing verification failed";
            exit 1;
          }
          rm -rf "$TEMP_DIR"
          
          echo "✅ Build validation successful"
          echo "📱 IPA file size: $(du -h ios/App/build/ipa/App.ipa | cut -f1)"

    artifacts:
      - ios/App/build/ipa/App.ipa

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
```