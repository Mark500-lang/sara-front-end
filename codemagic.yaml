workflows:
  ios-release:
    name: iOS Release Build
    integrations:
      app_store_connect: codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        NODE_VERSION: "20.x"  # Updated to Node 20 for Capacitor compatibility
        COCOAPODS_VERSION: "1.15.2"
        DEVELOPMENT_TEAM: "H9A4H444G4"
        BUNDLE_ID: "com.littlestories.app"
        # Disable ESLint warnings as errors for CI build
        CI: "false"
        DISABLE_ESLINT_PLUGIN: "true"
      groups:
        - Sarastories
      node: 20  # Updated to Node 20
      xcode: latest
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - ios/Pods
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
        - pattern: master
          include: true
        - pattern: develop
          include: true
    scripts:
      # PHASE 1: CLEAN AND SETUP
      - name: Clean Workspace
        script: |
          echo "=== Cleaning Workspace ==="
          rm -rf node_modules ios/Pods ios/App/Pods
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ios/Pods ios/Podfile.lock
          npm cache clean --force

      # PHASE 2: DEPENDENCY INSTALLATION
      - name: Install Dependencies
        script: |
          set -ex
          echo "=== Installing Node Modules ==="
          npm ci
          
          echo "=== Installing missing Babel plugin ==="
          npm install --save-dev @babel/plugin-proposal-private-property-in-object
          
          echo "=== Updating browserslist ==="
          npx update-browserslist-db@latest

      # PHASE 3: BUILD REACT APP (with ESLint disabled)
      - name: Build React App
        script: |
          set -ex
          echo "=== Building React App ==="
          # Temporarily disable ESLint for the build
          export DISABLE_ESLINT_PLUGIN=true
          export ESLINT_NO_DEV_ERRORS=false
          
          # Create a temporary env file to disable ESLint
          cat <<EOF > .env.production
          DISABLE_ESLINT_PLUGIN=true
          ESLINT_NO_DEV_ERRORS=false
          GENERATE_SOURCEMAP=false
          EOF
          
          # Build with explicit flags to ignore ESLint errors
          npm run build || {
            echo "Build failed, trying alternative approach..."
            # Alternative build approach
            npx react-scripts build --no-eslint
          }
          
          # Verify build was created
          if [ ! -d "build" ]; then
            echo "❌ React build failed - build directory not found"
            exit 1
          fi
          
          echo "✅ React build completed successfully"

      # PHASE 4: CAPACITOR SYNC
      - name: Sync Capacitor for iOS
        script: |
          set -ex
          echo "=== Syncing Capacitor for iOS ==="
          npx cap sync ios
          npx cap doctor

      # PHASE 5: IOS PROJECT CONFIGURATION
      - name: Configure iOS Project
        script: |
          echo "=== Setting up iOS Platform ==="
          cd ios/App
          
          echo "=== Installing CocoaPods ==="
          pod repo update
          pod install --repo-update --clean-install
          
          echo "=== Verifying Project Structure ==="
          if [ -d "Pods/Capacitor" ]; then
            echo "✅ Capacitor installation verified"
          else
            echo "❌ Capacitor installation failed!"
            exit 1
          fi

      # PHASE 6: CODE SIGNING SETUP
      - name: Configure Signing
        script: |
          set -ex
          echo "=== Setting Up Code Signing ==="
          
          # Import certificates and profiles from environment variables
          echo "$CERTIFICATE" | base64 --decode > /tmp/signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > /tmp/profile.mobileprovision
          
          # Set up keychain
          security create-keychain -p "" build.keychain
          security import /tmp/signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain
          
          # Install provisioning profile
          PROFILE_UUID=$(grep -a -A1 UUID /tmp/profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          
          echo "PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV

      # PHASE 7: BUILD CONFIGURATION
      - name: Configure Build Settings
        script: |
          cd ios/App
          
          echo "=== Updating Build Number ==="
          PLIST_PATH="App/Info.plist"
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH")
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          
          echo "Updated build number from $CURRENT_BUILD to $NEW_BUILD"
          
          # Configure manual signing in project
          PBXPROJ="App.xcodeproj/project.pbxproj"
          sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' "$PBXPROJ"
          sed -i '' '/CODE_SIGN_STYLE/d' "$PBXPROJ"
          sed -i '' '/DEVELOPMENT_TEAM/d' "$PBXPROJ"
          
          sed -i '' "/buildSettings = {/a \\
                    CODE_SIGN_STYLE = Manual; \\
                    PROVISIONING_PROFILE_SPECIFIER = \\\"$PROFILE_UUID\\\"; \\
                    DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM; \\
                    CODE_SIGN_IDENTITY = \\\"Apple Distribution\\\"; \\
                    " "$PBXPROJ"

      # PHASE 8: BUILD AND ARCHIVE
      - name: Build Archive
        script: |
          set -ex
          cd ios/App
          
          echo "=== Building Archive ==="
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath build/App.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            clean archive
          
          # Verify archive was created
          if [ ! -d "build/App.xcarchive" ]; then
            echo "❌ Archive creation failed"
            exit 1
          fi

      # PHASE 9: EXPORT IPA
      - name: Export IPA
        script: |
          set -ex
          cd ios/App
          
          echo "=== Creating Export Options ==="
          cat <<EOF > exportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>teamID</key>
              <string>$DEVELOPMENT_TEAM</string>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_UUID</string>
              </dict>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          echo "=== Exporting IPA ==="
          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/ipa \
            -allowProvisioningUpdates

      # PHASE 10: VALIDATION
      - name: Validate Build
        script: |
          set -ex
          echo "=== Validating Build Artifacts ==="
          
          # Check IPA exists
          if [ ! -f "ios/App/build/ipa/App.ipa" ]; then
            echo "❌ IPA file not found"
            ls -la ios/App/build/ipa/
            exit 1
          fi
          
          # Verify IPA structure
          unzip -l ios/App/build/ipa/App.ipa | grep "Payload/App.app" || {
            echo "❌ Invalid IPA structure"
            exit 1
          }
          
          echo "✅ Build validation successful"

    artifacts:
      - ios/App/build/ipa/App.ipa
      - ios/App/exportOptions.plist

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true