workflows:
  ios-release:
    name: iOS Release Build
    integrations:
      app_store_connect: codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        NODE_VERSION: "20.x"
        COCOAPODS_VERSION: "1.15.2"
        DEVELOPMENT_TEAM: "H9A4H444G4"
        BUNDLE_ID: "com.littlestories.app"
        CI: "false"
        DISABLE_ESLINT_PLUGIN: "true"
      groups:
        - Sarastories
      node: 20
      xcode: latest
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - ios/Pods
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
        - pattern: master
          include: true
        - pattern: develop
          include: true

    scripts:
      # PHASE 1: CLEAN AND SETUP
      - name: Clean Workspace
        script: |
          echo "=== Cleaning Workspace ==="
          rm -rf node_modules ios/Pods ios/App/Pods
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ios/Pods ios/Podfile.lock
          npm cache clean --force

      # PHASE 2: DEPENDENCY INSTALLATION
      - name: Install Dependencies
        script: |
          set -ex
          echo "=== Installing Node Modules ==="
          npm ci
          
          echo "=== Installing missing Babel plugin ==="
          npm install --save-dev @babel/plugin-proposal-private-property-in-object
          
          echo "=== Updating browserslist ==="
          npx update-browserslist-db@latest

      # PHASE 3: BUILD REACT APP
      - name: Build React App
        script: |
          set -ex
          echo "=== Building React App ==="
          export DISABLE_ESLINT_PLUGIN=true
          export ESLINT_NO_DEV_ERRORS=false
          
          npm run build
          
          if [ ! -d "build" ]; then
            echo "❌ React build failed - build directory not found"
            exit 1
          fi
          
          echo "✅ React build completed successfully"

      # PHASE 4: CAPACITOR SYNC
      - name: Sync Capacitor for iOS
        script: |
          set -ex
          echo "=== Syncing Capacitor for iOS ==="
          npx cap sync ios
          
          echo "=== Configuring Landscape Orientation ==="
          cd ios/App/App
          PLIST_PATH="Info.plist"
          
          # Remove any existing orientation settings
          /usr/libexec/PlistBuddy -c "Delete :UISupportedInterfaceOrientations" "$PLIST_PATH" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Delete :UISupportedInterfaceOrientations~ipad" "$PLIST_PATH" 2>/dev/null || true
          
          # Add landscape orientations for iPhone
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations array" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations:0 string UIInterfaceOrientationLandscapeLeft" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations:1 string UIInterfaceOrientationLandscapeRight" "$PLIST_PATH"
          
          # Add landscape orientations for iPad
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations~ipad array" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations~ipad:0 string UIInterfaceOrientationLandscapeLeft" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations~ipad:1 string UIInterfaceOrientationLandscapeRight" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations~ipad:2 string UIInterfaceOrientationPortrait" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :UISupportedInterfaceOrientations~ipad:3 string UIInterfaceOrientationPortraitUpsideDown" "$PLIST_PATH"
          
          # Set initial orientation to landscape
          /usr/libexec/PlistBuddy -c "Delete :UIInterfaceOrientation" "$PLIST_PATH" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :UIInterfaceOrientation string UIInterfaceOrientationLandscapeRight" "$PLIST_PATH"
          
          echo "✅ Landscape orientation configured"

      # PHASE 5: IOS PROJECT CONFIGURATION (FIXED PODS)
      - name: Configure iOS Project
        script: |
          set -ex
          echo "=== Setting up iOS Platform ==="
          cd ios/App
          
          echo "=== Generating Podfile with iOS 14.0 platform ==="
          cat > Podfile << 'EOF'
          platform :ios, '14.0'
          use_frameworks! :linkage => :dynamic
          
          # Suppress CDN warning
          install! 'cocoapods', :warn_for_unused_master_specs_repo => false
          
          target 'App' do
            # Capacitor Core
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
            
            # Capacitor Plugins
            pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'
            pod 'CapacitorDevice', :path => '../../node_modules/@capacitor/device'
            pod 'CapacitorFilesystem', :path => '../../node_modules/@capacitor/filesystem'
            pod 'CapacitorPreferences', :path => '../../node_modules/@capacitor/preferences'
            
            # Additional plugins with correct pod names
            pod 'CapacitorVoiceRecorder', :path => '../../node_modules/capacitor-voice-recorder'
            pod 'AparajitaCapacitorSecureStorage', :path => '../../node_modules/@aparajita/capacitor-secure-storage'
            pod 'CapacitorBlobWriter', :path => '../../node_modules/capacitor-blob-writer'
          end
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
                
                # Fix for GCDWebServer deployment target warning
                if target.name == 'GCDWebServer'
                  config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
                end
                
                # CRITICAL FIX: Remove provisioning profiles from Pods targets
                config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ''
                config.build_settings['PROVISIONING_PROFILE'] = ''
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
                config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
                config.build_settings['CODE_SIGN_IDENTITY'] = ''
                
                if target.name.start_with?('Capacitor') || target.name.start_with?('Aparajita')
                  config.build_settings['SWIFT_VERSION'] = '5.0'
                  config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
                end
              end
            end
          end
          EOF
          
          echo "=== Installing CocoaPods ==="
          pod repo remove master 2>/dev/null || true
          pod install --repo-update --clean-install
          
          echo "=== Verifying Project Structure ==="
          if [ -d "Pods" ] && [ -d "App.xcworkspace" ]; then
            echo "✅ CocoaPods installation verified"
          else
            echo "❌ CocoaPods installation failed!"
            exit 1
          fi

      # PHASE 6: CREATE XCODE SCHEME
      - name: Create Xcode Scheme
        script: |
          set -ex
          echo "=== Creating Xcode scheme ==="
          cd ios/App
          
          # Create scheme directory
          mkdir -p App.xcodeproj/xcshareddata/xcschemes
          
          # Create scheme file
          cat > App.xcodeproj/xcshareddata/xcschemes/App.xcscheme << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <Scheme LastUpgradeVersion="1500" version="1.7">
            <BuildAction parallelizeBuildables="YES" buildImplicitDependencies="YES">
              <BuildActionEntries>
                <BuildActionEntry buildForTesting="YES" buildForRunning="YES" buildForProfiling="YES" buildForArchiving="YES" buildForAnalyzing="YES">
                  <BuildableReference BuildableIdentifier="primary" BlueprintIdentifier="1DF1B9C3257A6D4E00F1B1A6" BuildableName="App.app" BlueprintName="App" ReferencedContainer="container:App.xcodeproj"/>
                </BuildActionEntry>
              </BuildActionEntries>
            </BuildAction>
            <TestAction buildConfiguration="Debug" selectedDebuggerIdentifier="Xcode.DebuggerFoundation.Debugger.LLDB" selectedLauncherIdentifier="Xcode.DebuggerFoundation.Launcher.LLDB" shouldUseLaunchSchemeArgsEnv="YES" codeCoverageEnabled="YES">
              <Testables/>
            </TestAction>
            <LaunchAction buildConfiguration="Debug" selectedDebuggerIdentifier="Xcode.DebuggerFoundation.Debugger.LLDB" selectedLauncherIdentifier="Xcode.DebuggerFoundation.Launcher.LLDB" launchStyle="0" useCustomWorkingDirectory="NO" ignoresPersistentStateOnLaunch="NO" debugDocumentVersioning="YES" debugServiceExtension="internal" allowLocationSimulation="YES">
              <BuildableProductRunnable runnableDebuggingMode="0">
                <BuildableReference BuildableIdentifier="primary" BlueprintIdentifier="1DF1B9C3257A6D4E00F1B1A6" BuildableName="App.app" BlueprintName="App" ReferencedContainer="container:App.xcodeproj"/>
              </BuildableProductRunnable>
            </LaunchAction>
            <ProfileAction buildConfiguration="Release" shouldUseLaunchSchemeArgsEnv="YES" savedToolIdentifier="" useCustomWorkingDirectory="NO" debugDocumentVersioning="YES">
              <BuildableProductRunnable runnableDebuggingMode="0">
                <BuildableReference BuildableIdentifier="primary" BlueprintIdentifier="1DF1B9C3257A6D4E00F1B1A6" BuildableName="App.app" BlueprintName="App" ReferencedContainer="container:App.xcodeproj"/>
              </BuildableProductRunnable>
            </ProfileAction>
            <AnalyzeAction buildConfiguration="Debug"/>
            <ArchiveAction buildConfiguration="Release" revealArchiveInOrganizer="YES"/>
          </Scheme>
          EOF
          
          echo "✅ Xcode scheme created"

      # PHASE 7: CODE SIGNING SETUP (WITH CERTIFICATE VERIFICATION)
      - name: Configure Signing
        script: |
          set -ex
          echo "=== Setting Up Code Signing ==="
          
          # Create keychain and import certificate
          security create-keychain -p "" build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          
          # Import certificate from environment variable
          echo "$CERTIFICATE" | base64 --decode > /tmp/certificate.p12
          security import /tmp/certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          
          # Configure keychain settings
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          
          # Verify certificate is installed
          echo "=== Verifying Certificate ==="
          security find-identity -v -p codesigning build.keychain
          
          # Install provisioning profile
          echo "$PROVISIONING_PROFILE" | base64 --decode > /tmp/profile.mobileprovision
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i /tmp/profile.mobileprovision))
          
          # Verify provisioning profile contents
          echo "=== Verifying Provisioning Profile ==="
          PROFILE_CERTS=$(/usr/libexec/PlistBuddy -c 'Print :DeveloperCertificates' /dev/stdin <<< $(security cms -D -i /tmp/profile.mobileprovision) | grep -c "Apple Distribution" || true)
          echo "Provisioning profile contains $PROFILE_CERTS distribution certificates"
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          
          echo "PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV
          echo "PROFILE_NAME=SaraStories_AppStore_2025" >> $CM_ENV
          echo "✅ Code signing configured successfully - Profile UUID: $PROFILE_UUID"

      # PHASE 8: BUILD CONFIGURATION
      - name: Configure Build Settings
        script: |
          set -ex
          cd ios/App
          
          echo "=== Updating Build Number ==="
          PLIST_PATH="App/Info.plist"
          
          # Handle the case where build number is a variable
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH" 2>/dev/null || echo "1")
          
          # If it's a variable, set a default build number
          if [[ "$CURRENT_BUILD" == *"$"* ]]; then
            CURRENT_BUILD="1"
          fi
          
          # Generate timestamp-based build number for uniqueness
          NEW_BUILD=$(date +%s)
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" "$PLIST_PATH"
          
          echo "Updated build number to: $NEW_BUILD"
          echo "Bundle ID set to: $BUNDLE_ID"
          
          echo "✅ Build settings configured"

      # PHASE 9: PROJECT SIGNING CONFIGURATION (APP ONLY)
      - name: Configure Project Signing
        script: |
          set -ex
          cd ios/App
          
          echo "=== Configuring Project Signing (App Target Only) ==="
          echo "Profile UUID: $PROFILE_UUID"
          echo "Development Team: $DEVELOPMENT_TEAM"
          echo "Bundle ID: $BUNDLE_ID"
          
          # Use xcodebuild to configure signing ONLY for the main app target
          # This prevents provisioning profiles from being applied to Pods
          xcodebuild -project App.xcodeproj \
            -target App \
            -configuration Release \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            -showBuildSettings | grep -E "(PROVISIONING_PROFILE|CODE_SIGN)" || true
          
          echo "✅ Project signing configured for App target only"

      # PHASE 10: VERIFY PROJECT INTEGRITY
      - name: Verify Project Integrity
        script: |
          set -ex
          cd ios/App
          
          echo "=== Verifying Project Integrity ==="
          
          # Check if project file is valid
          if xcodebuild -project App.xcodeproj -list > /dev/null 2>&1; then
            echo "✅ Project file is valid"
          else
            echo "❌ Project file is corrupted - restoring from Capacitor"
            cd ../..
            npx cap sync ios
            cd ios/App
          fi
          
          # List available schemes
          echo "=== Available Schemes ==="
          xcodebuild -workspace App.xcworkspace -list
          
          # Verify scheme exists and can build
          echo "=== Verifying Build Settings ==="
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            -showBuildSettings | grep -E "(PROVISIONING_PROFILE|PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN)" | head -10

      # PHASE 11: BUILD AND ARCHIVE (WITHOUT PODS PROVISIONING)
      - name: Build Archive
        script: |
          set -ex
          cd ios/App
          
          echo "=== Building Archive ==="
          echo "Using Profile UUID: $PROFILE_UUID"
          echo "Using Development Team: $DEVELOPMENT_TEAM"
          echo "Using Bundle ID: $BUNDLE_ID"
          
          # Build archive with explicit settings to avoid Pods provisioning issues
          xcodebuild archive \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath build/App.xcarchive \
            -allowProvisioningUpdates \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            OTHER_CODE_SIGN_FLAGS="--deep"
          
          if [ ! -d "build/App.xcarchive" ]; then
            echo "❌ Archive creation failed"
            exit 1
          fi
          echo "✅ Archive created successfully"

      # PHASE 12: EXPORT IPA
      - name: Export IPA
        script: |
          set -ex
          cd ios/App
          
          echo "=== Creating Export Options ==="
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_UUID</string>
              </dict>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>$DEVELOPMENT_TEAM</string>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          echo "=== Exporting IPA ==="
          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/ipa \
            -allowProvisioningUpdates
          
          echo "✅ IPA exported successfully"

      # PHASE 13: VALIDATION
      - name: Validate Build
        script: |
          set -ex
          echo "=== Validating Build Artifacts ==="
          
          if [ ! -f "ios/App/build/ipa/App.ipa" ]; then
            echo "❌ IPA file not found"
            ls -la ios/App/build/ipa/ || true
            exit 1
          fi
          
          # Check IPA contents
          unzip -l "ios/App/build/ipa/App.ipa" | grep "Payload/App.app" || {
            echo "❌ Invalid IPA structure"
            unzip -l "ios/App/build/ipa/App.ipa"
            exit 1
          }
          
          echo "✅ Build validation successful"
          echo "📱 IPA file size: $(du -h ios/App/build/ipa/App.ipa | cut -f1)"

    artifacts:
      - ios/App/build/ipa/App.ipa
      - ios/App/exportOptions.plist

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true